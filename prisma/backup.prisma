generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/app/lib/zod"
  useMultipleFiles = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Equipment {
  id            String  @id @default(uuid())
  unitNumber    String
  description   String
  year          Int
  keywords      String
  serial        String  @unique
  tag           String
  meterTracking Boolean

  primaryMeter        MeterReading // Type of primary meter (Hours, Kilometers, Miles)
  primaryMeterReading Float // Current value of the primary meter

  secondaryMeter        MeterReading? // Type of secondary meter (Hours, Kilometers, Miles)
  secondaryMeterReading Float? // Current value of the secondary meter

  equipmentType   EquipmentType   @relation(fields: [equipmentTypeId], references: [id])
  equipmentTypeId String
  make            Make            @relation(fields: [makeId], references: [id])
  makeId          String
  model           Model           @relation(fields: [modelId], references: [id])
  modelId         String
  workOrder       WorkOrder[]
  recurringTask   RecurringTask[]
  repairTask      RepairTask[]
  tracking        Tracking[]
}

model Make {
  id        String      @id @default(uuid())
  name      String      @unique
  Equipment Equipment[]
}

model Model {
  id        String      @id @default(uuid())
  name      String      @unique
  Equipment Equipment[]
}

model EquipmentType {
  id        String      @id @default(uuid())
  name      String      @unique
  Equipment Equipment[]
}

enum MeterReading {
  Hours
  Kilometers
  Miles
  Date
  None
}

model Item {
  id                   String                 @id @default(uuid())
  name                 String
  partNumber           String                 @unique
  description          String
  category             Categories?            @relation(fields: [categoryId], references: [id])
  categoryId           String? // Foreign key field
  unitType             UnitType               @relation(fields: [unitTypeId], references: [id])
  unitTypeId           String
  quantity             Int
  manufacturers        ItemManufacturer[]
  vendors              ItemVendor[]
  inventory            Inventory[]
  orderItem            OrderItem[]
  inventoryTransaction InventoryTransaction[]
  taskItem             TaskItem[]
}

model UnitType {
  id   String @id @default(uuid())
  name String
  item Item[]
}

model Categories {
  id   String @id @default(uuid())
  name String
  item Item[]
}

model Warehouse {
  id                   String                 @id @default(uuid())
  name                 String
  inventory            Inventory[]
  purchaseOrder        PurchaseOrder[]
  inventoryTransaction InventoryTransaction[]
}

model Vendor {
  id            String          @id @default(uuid())
  name          String          @unique /// @zod.string.min(1, { message: "Name must not be empty" })
  contact       String
  vendorType    VendorType?
  phone         String /// @zod.import(["import { isValidPhoneNumber } from 'react-phone-number-input'"]).custom.use(z.string().refine((value) => isValidPhoneNumber(value), { message: "Invalid phone number" }))
  keywords      String
  address       String
  items         ItemVendor[]
  purchaseOrder PurchaseOrder[]
}

enum VendorType {
  None
  Supplier
  Distributor
  Manufacturer
}

model ItemVendor {
  itemId           String
  vendorId         String // Rename supplierId to vendorId
  items            Item   @relation(fields: [itemId], references: [id])
  vendor           Vendor @relation(fields: [vendorId], references: [id]) // Update relation to Vendor
  vendorPartNumber String
  barcode          String

  @@id([itemId, vendorId])
}

model Manufacturer {
  id    String             @id @default(uuid())
  name  String             @unique
  items ItemManufacturer[]
}

model ItemManufacturer {
  itemId         String
  manufacturerId String
  items          Item         @relation(fields: [itemId], references: [id])
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])

  @@id([itemId, manufacturerId])
}

model Inventory {
  id              String    @id @default(uuid())
  quantity        Float
  reorderQuantity Float
  lowStockLevel   Float
  unitCostDollar  Float
  location        String
  itemId          String
  warehouseId     String
  unitCostVES     Float
  items           Item      @relation(fields: [itemId], references: [id])
  warehouse       Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([itemId, warehouseId]) // Define unique constraint on itemId and warehouseId
}

model InventoryTransaction {
  id              String          @id @default(uuid())
  transactionType TransactionType
  quantity        Float
  itemId          String
  warehouseId     String
  purchaseOrderId String? // Optional field for PurchaseOrder ID
  createdAt       DateTime        @default(now())

  item          Item           @relation(fields: [itemId], references: [id])
  warehouse     Warehouse      @relation(fields: [warehouseId], references: [id])
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
}

enum TransactionType {
  None
  Initial
  Receipt
  Issuance
  Purchase_Order
  Work_Order
}

model PurchaseOrder {
  id           String     @id @default(uuid())
  poNumber     Int        @default(autoincrement())
  dateOpened   DateTime
  dateRequired DateTime
  shipVia      Shipping
  invoice      String
  workOrder    Int?
  notes        String
  poStatus     StatusType
  taxRate      Int

  buyerId     String //Foreign key field for Warehouse
  termsId     String
  warehouseId String // Foreign key field for Warehouse
  vendorId    String? // Foreign key field for Vendor

  terms                Terms                  @relation(fields: [termsId], references: [id])
  warehouse            Warehouse              @relation(fields: [warehouseId], references: [id])
  vendor               Vendor?                @relation(fields: [vendorId], references: [id])
  buyer                Employee               @relation(fields: [buyerId], references: [id])
  orderItems           OrderItem[]
  inventoryTransaction InventoryTransaction[]
}

model Terms {
  id            String          @id @default(uuid())
  name          String          @unique
  PurchaseOrder PurchaseOrder[]
}

enum StatusType {
  None
  Requisition
  Ordered
  Received_Partial
  Close
}

enum Shipping {
  None
  Air
  Courier
  Expedited
  Ground
  Next_Day
}

model OrderItem {
  id          String @id @default(uuid())
  quantity    Float
  requiredQty Float
  unitCost    Float
  totalPrice  Float

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String

  itemId String // Foreign key field for Item
  item   Item   @relation(fields: [itemId], references: [id])
}

model WorkOrder {
  id            String          @id @default(uuid())
  woNumber      Int             @default(autoincrement())
  scheduled     DateTime
  due           DateTime
  priority      Priority
  workOrderType String
  notes         String
  woStatus      TaskStatus
  employeeId    String
  employee      Employee        @relation(fields: [employeeId], references: [id])
  equipmentId   String
  equipment     Equipment       @relation(fields: [equipmentId], references: [id])
  tasks         WorkOrderTask[] // Relation to tasks through WorkOrderTask
}

enum Priority {
  Low
  Normal
  High
  Urgent
}

model WorkOrderTask {
  id          String    @id @default(uuid())
  workOrderId String // Reference to the WorkOrder
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  taskId      String // Reference to the Task
  task        Task      @relation(fields: [taskId], references: [id])

  @@unique([workOrderId, taskId]) // Ensure each task is only added once per work order
}

model RecurringTask {
  id         String     @id @default(uuid())
  taskStatus TaskStatus

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  equipmentId String // Reference to the Equipment model
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  tracking Tracking? @relation("TrackingToRecurringTask") // Simplified relation without `fields` and `references`

  parts                 TaskItem[] // Relation to the parts required for this recurring task
  maintenanceTemplate   MaintenanceTemplate? @relation(fields: [maintenanceTemplateId], references: [id])
  maintenanceTemplateId String?
}

model RepairTask {
  id           String     @id @default(uuid())
  equipmentId  String // Reference to the Equipment model
  equipment    Equipment  @relation(fields: [equipmentId], references: [id])
  taskId       String     @unique // Reference to the Task model
  task         Task       @relation(fields: [taskId], references: [id])
  dueBy        DateTime
  employeeId   String
  employee     Employee   @relation(fields: [employeeId], references: [id])
  repairTypeId String
  repairType   RepairType @relation(fields: [repairTypeId], references: [id])
  priority     Priority
  notes        String
}

model RepairType {
  id         String       @id @default(uuid())
  name       String       @unique
  repairTask RepairTask[]
}

model Task {
  id                    String               @id @default(uuid())
  description           String // General description of the task
  RecurringTask         RecurringTask[]
  workOrders            WorkOrderTask[] // Relation to work orders through WorkOrderTask
  repairTask            RepairTask?
  maintenanceTemplate   MaintenanceTemplate? @relation(fields: [maintenanceTemplateId], references: [id])
  maintenanceTemplateId String?
}

model TaskItem {
  id              String        @id @default(uuid())
  quantity        Int // Quantity of the item required for the task
  recurringTaskId String // Reference to the RecurringTask model
  recurringTask   RecurringTask @relation(fields: [recurringTaskId], references: [id])
  itemId          String // Reference to the Item model
  item            Item          @relation(fields: [itemId], references: [id])
}

enum TaskType {
  None
  Recurring
  Repair
  Renewal
}

enum TaskStatus {
  None
  Active
  Inactive
}

model Tracking {
  id String @id @default(uuid())

  // For tracking by date
  trackByDate       Boolean // Indicates if tracking is by date
  trackByDateEvery  Boolean
  dateValues        MeterValues[] @relation("DateValues") // Relation to MeterValues for dates  dateInterval      Int? // Interval in days for recurring tasks
  dateInterval      Int? // Interval in days for recurring tasks
  dateAdvanceNotice Int? // Number of days in advance to notify before the task is due
  dateNextDue       DateTime?
  dateLastPerformed DateTime?

  // For tracking by primary meter values
  trackByPrimary       Boolean // Indicates if tracking is by primary meter
  trackByPrimaryEvery  Boolean
  primaryMeterType     MeterReading? // Type of primary meter (e.g., Hours, Kilometers, Miles)
  primaryInterval      Float? // Interval for tracking by primary meter (e.g., every 5000 miles)
  primaryMeterAt       MeterValues[] @relation("PrimaryMeterValues") // Relation to MeterValues for secondary meter
  primaryAdvanceNotice Float? // Number of units (hours, kilometers, miles) in advance to notify before the task is due
  primaryNextDue       Float?
  primaryLastPerformed Float? // Last recorded value of the primary meter when the task was performed

  // For tracking by secondary meter values
  trackBySecondary       Boolean // Indicates if tracking is by secondary meter
  trackBySecondaryEvery  Boolean
  secondaryMeterType     MeterReading? // Type of secondary meter (e.g., Hours, Kilometers, Miles)
  secondaryInterval      Float? // Interval for tracking by secondary meter (e.g., every 5000 miles)
  secondaryMeterAt       MeterValues[] @relation("SecondaryMeterValues") // Relation to MeterValues for secondary meter
  secondaryAdvanceNotice Float? // Number of units (hours, kilometers, miles) in advance to notify before the task is due
  secondaryNextDue       Float?
  secondaryLastPerformed Float? // Last recorded value of the secondary meter when the task was performed

  recurringTaskId String        @unique // Ensure unique for one-to-one relation
  recurringTask   RecurringTask @relation("TrackingToRecurringTask", fields: [recurringTaskId], references: [id])

  Equipment   Equipment?    @relation(fields: [equipmentId], references: [id])
  equipmentId String?
  meterValues MeterValues[]
}

model MeterValues {
  id          String   @id @default(uuid())
  value       Float // Use for meter values
  date        DateTime // Use for specific dates
  completed   Boolean  @default(false)
  nextDueDate Float
  tracking    Tracking @relation(fields: [trackingId], references: [id])
  trackingId  String

  primaryTrackingId String?
  primaryTracking   Tracking? @relation("PrimaryMeterValues", fields: [primaryTrackingId], references: [id])

  secondaryTrackingId String?
  secondaryTracking   Tracking? @relation("SecondaryMeterValues", fields: [secondaryTrackingId], references: [id])

  dateTrackingId String?
  dateTracking   Tracking? @relation("DateValues", fields: [dateTrackingId], references: [id])

  @@unique([id, trackingId])
}

model MaintenanceTemplate {
  id        String          @id @default(uuid())
  name      String // Name of the template
  tasks     Task[] // Tasks included in the template
  equipment RecurringTask[] // Links to equipment-specific recurring tasks
}

model Employee {
  id             String          @id @default(uuid())
  firstName      String /// @zod.string.min(1, { message: "First name must not be empty" })
  lastName       String /// @zod.string.min(1, { message: "Last name must not be empty" })
  phone          String /// @zod.import(["import { isValidPhoneNumber } from 'react-phone-number-input'"]).custom.use(z.string().refine((value) => isValidPhoneNumber(value), { message: "Invalid phone number" }))
  employeeStatus EmployeeStatus
  loginAllowed   Boolean
  email          String          @unique
  adminType      AdminType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchaseOrder  PurchaseOrder[]
  workOrder      WorkOrder[]
  repairTask     RepairTask[]
}

enum AdminType {
  None
  Admin
  Standard
  Operator
}

enum EmployeeStatus {
  None
  Active
  Inactive
}
